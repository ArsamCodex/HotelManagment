@page "/Reperations2"
@using HotelManagment.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager NavigationManager
@using System.Security.Claims
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject HttpClient Http

<h4>Administration . </h4>
<h5>All reported technical problem</h5>
@if (inspectTheRoomAdminCall != null && inspectTheRoomAdminCall.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th style="width:10%;background-color:#E5E4E2">Room Number</th>
                <th style="width:22%;background-color:#E5E4E2">Inspection Date</th>
                <th style="width:30%;background-color:#E5E4E2">Staff</th>
                <th style="width:15%;background-color:#E5E4E2">Urgent</th>
                <th style="width:15%;background-color:#E5E4E2;">Start Reperation</th>
                <th style="width:5%;background-color:#E5E4E2">View</th>
                <th style="width:5%;background-color:#E5E4E2">Edit</th>
                <th style="width:5%;background-color:#E5E4E2">Delete</th>



            </tr>
        </thead>
        <tbody>
           
             @foreach (var inspection in inspectTheRoomAdminCall)
            {
                <ViewEditComponent RoomInspection="inspection" OnEmployeeDeleted="EmployeeDeleted"></ViewEditComponent>

            }
        </tbody>
    </table>
}
else
{
    <p>No inspections available.</p>
}
@code {
    private Timer _timer;
    List<RoomInspection> inspectTheRoomAdminCall = new List<RoomInspection>();
    public string user2 { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await FetchData();
        _timer = new Timer(async _ =>
       {
           await FetchData();
           StateHasChanged(); // Ensure UI refreshes after each API call
       }, null, TimeSpan.Zero, TimeSpan.FromMinutes(1));

    }

    private async Task FetchData()
    {
        // Check if the user is logged in and fetch their information
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {

            user2 = user.FindFirst(c => c.Type == "sub")?.Value;
            inspectTheRoomAdminCall = await Http.GetFromJsonAsync<List<RoomInspection>>("Inspection/RepairsRoomForAdmin");


        }
    }
    public void Dispose()
    {
        _timer?.Dispose();
    }

    protected async Task EmployeeDeleted()
    {
        inspectTheRoomAdminCall = inspectTheRoomAdminCall = await Http.GetFromJsonAsync<List<RoomInspection>>("Inspection/RepairsRoomForAdmin");
        StateHasChanged();
    }

  

}


