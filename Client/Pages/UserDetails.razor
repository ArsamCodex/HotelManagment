@page "/UserDetails/{id}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager NavigationManager
@using HotelManagment.Shared
@using System.Security.Claims
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject HttpClient Http

<style>
    .paper {
        background-color: #f9f9f9;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        margin: 20px auto;
        max-width: 80%;
    }

    /* Add more CSS styles for the paper-like effect as needed */
</style>
<div class="paper">
    <center><h1>User ID @id</h1></center>
    <h5>User Id <b>@userDto.UserId</b></h5>
    <h5>User Email <b> @userDto.UserEmail</b></h5>
    <h5>Is Email Confirmed <b> @userDto.EmailConfirmed</b></h5>
    <h5>Password Hash <b> @userDto.PasswordHash</b></h5>
    <h5>Phone Number <b> @userDto.UserPhone</b></h5>
    <h5>Is Phone Confirmed <b> @userDto.PhoneNumberConfirmed</b></h5>
    <h5>Two Factor Login  <b> @userDto.TwoFactorEnabled</b></h5>
    <h5>Current Role <b> @userDto.RoleName</b></h5>

    <HotelManagment.Client.Component.UsersComponent.RoleSelector Roles="Roles" OnRoleChanged="HandleSelectedRoleChanged" SelectedRole="SelectedRole2"></HotelManagment.Client.Component.UsersComponent.RoleSelector>
  <!---

    <div>
        <label for="selectedRole">Select Role:</label>
        <select id="selectedRole" @bind="SelectedRole">
            <option value="">Select a role</option>
            @if (Roles != null)
            {
                @foreach (var role in Roles)
                {
                    <option value="@role">@role</option>
                }
            }
        </select>
        <button @onclick="Changerole" disabled="@string.IsNullOrEmpty(SelectedRole)">Change Role</button>

    </div>-->

    <hr />
    <HotelManagment.Client.Component.UsersComponent.ReturnButton ButtonText="Return" Destination="/Users"></HotelManagment.Client.Component.UsersComponent.ReturnButton>
</div>
@SelectedRole2
@code {
    [Parameter]
    public string id { get; set; }
    public string user2 { get; set; }
    public UserDtoFOrAdmin userDto = new UserDtoFOrAdmin();
    public string userRole { get; set; }
    private List<string> Roles { get; set; }
    public string? SelectedRole2{ get; set; }
    protected override async Task OnInitializedAsync()
    {
        // Check if the user is logged in and fetch their information
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            // User is authenticated, you can access user ID
            user2 = user.FindFirst(c => c.Type == "sub")?.Value;


            var response = await Http.GetAsync($"Administration/GetUserByIdInclude/{id}");

            if (response.IsSuccessStatusCode)
            {
                // Deserialize JSON response into UserDto object
                userDto = await response.Content.ReadFromJsonAsync<UserDtoFOrAdmin>();
            }
            var x = await Http.GetAsync($"Administration/GetAllRoles");

            // Deserialize JSON response into UserDto object
            Roles = await x.Content.ReadFromJsonAsync<List<string>>();



        }

    }

    private async Task HandleSelectedRoleChanged(string selectedRole)
    {
        // Assign the selected role to selectedRole2
        SelectedRole2 = selectedRole;
        // Now you can use selectedRole2 elsewhere in the component
       await Changerole();
    }

    public async Task Changerole()
    {
        var my = "Technical";
        await Http.PostAsync($"Administration/ChangeRoleAdmin/{SelectedRole2}/{id}", null);
        var response = await Http.GetAsync($"Administration/GetUserByIdInclude/{id}");

        if (response.IsSuccessStatusCode)
        {
            // Deserialize JSON response into UserDto object
            userDto = await response.Content.ReadFromJsonAsync<UserDtoFOrAdmin>();
        }
      
        StateHasChanged();
    }
}

