@page "/Users"
@using HotelManagment.Client.DTos
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject HttpClient Http

<div>
    <input type="text" @bind-value="searchTerm" style="width:80%" />
    <button style="width:18%" @onclick="SearchUsers">Search By Email  </button>
</div>
<br />

<table class="table">
    <thead>
        <tr>
            <th style="width:10%;background-color:#E5E4E2">Id</th>
            <th style="width:22%;background-color:#E5E4E2">UserName</th>
            <th style="width:30%;background-color:#E5E4E2">Email</th>
            <th style="width:15%;background-color:#E5E4E2">Email Confirmed</th>
            <th style="width:15%;background-color:#E5E4E2">Phone</th>
            <th style="width:15%;background-color:#E5E4E2">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in users)
        {
            <tr>
                <td>@user.Id</td>
                <td>@user.UserName</td>
                <td>@user.Email</td>
                <td>@(user.EmailConfirmed ? "Yes" : "No")</td>
                <td>@user.PhoneNumber</td>
                <td>
                <td><a href="UserDetails/@user.Id" class="btn btn-primary m-1">View</a></td>
                <td><a href="UserDetailsEdit/@user.Id" class="btn btn-warning m-1">Edit</a></td>
                <td><a @onclick="Delete_Click" class="btn btn-danger m-1">Delete</a></td>
                </td>
            </tr>
        }
    </tbody>
</table>
@code {
    public List<UserDto> users = new List<UserDto>();
    public string user2 { get; set; }
    public string searchTerm { get; set; }


    protected override async Task OnInitializedAsync()
    {
        // Check if the user is logged in and fetch their information
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            // User is authenticated, you can access user ID
            user2 = user.FindFirst(c => c.Type == "sub")?.Value;
            users = await Http.GetFromJsonAsync<List<UserDto>>($"/Administration/GetAllUser");
        }
    }

    private async Task SearchUsers()
    {

        var x = users = await Http.GetFromJsonAsync<List<UserDto>>($"/Administration/GetAllUser");

        users = x.Where(c => c.Email == searchTerm).ToList();
        if (string.IsNullOrEmpty(searchTerm))
        {
            users = x;
        }
        StateHasChanged();


    }

    public async Task Delete_Click()
    {
        
    }
}
