@page "/ReserveRoom"
@using HotelManagment.Server.Models;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager NavigationManager
@using HotelManagment.Shared
@using System.Security.Claims
@inject AuthenticationStateProvider _AuthenticationStateProvider
@inject HttpClient Http
@inject IHttpClientFactory HttpClientFactory
@using System.Security.Cryptography;
@using System.Text;



<AuthorizeView Context="authContext">
    <Authorized Context="formContext">

        <div class="form-container">
            <EditForm Model="@reservationRoom" OnValidSubmit="@HandleValidSubmit1">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="reservationRoom.Email" id="email" class="form-control" placeholder="name@example.com" />
                    <label for="email"> Email </label>
                    <ValidationMessage For="@(() => reservationRoom.Email)" />

                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="reservationRoom.FirstName" id="email" class="form-control" placeholder="name@example.com" />
                    <label for="email">First Name </label>
                    <ValidationMessage For="@(() => reservationRoom.FirstName)" />

                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="reservationRoom.LastName" id="email" class="form-control" placeholder="name@example.com" />
                    <label for="email"> Last Name </label>
                    <ValidationMessage For="@(() => reservationRoom.LastName)" />

                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="reservationRoom.Adress" id="email" class="form-control" placeholder="name@example.com" />
                    <label for="email"> Adress </label>
                    <ValidationMessage For="@(() => reservationRoom.Adress)" />

                </div>
                <select @bind="reservationRoom.gender">
                    <option value="">Gender</option>
                    @foreach (var gender in Enum.GetValues(typeof(Gender)))
                    {
                        <option value="@gender">@gender</option>
                    }
                </select>




                <div class="form-floating mb-3">
                    <InputText @bind-Value="reservationRoom.PhoneNumber" id="email" class="form-control" placeholder="name@example.com" />
                    <label for="email"> Phone Number </label>
                    <ValidationMessage For="@(() => reservationRoom.PhoneNumber)" />

                </div>

                <div class="form-floating mb-3">
                    <InputDate @bind-Value="reservationRoom.CheckInDate" id="email" class="form-control" placeholder="name@example.com" />
                    <label for="email">Checkin Date</label>
              

                </div>
                <div class="form-floating mb-3">
                    <InputDate @bind-Value="reservationRoom.CheckOutDate" id="email" class="form-control" placeholder="name@example.com" />
                    <label for="email">Checkout Date</label>
                
                </div>

                <div class="form-floating mb-3">
                    <InputNumber @bind-Value="reservationRoom.HowManyPerosn" id="email" class="form-control" placeholder="name@example.com" />
                    <label for="email">How Manny Persons</label>
                </div>
                <div class="checkbox mb-3">
                    <InputCheckbox @bind-Value="reservationRoom.IsPaid" id="isPaid" class="form-check-input" placeholder="name@example.com" />
                    <label for="email">Is Paid</label>
                </div>


                <div class="form-floating mb-3">
                    <InputNumber @bind-Value="reservationRoom.Amount" id="email" class="form-control" placeholder="name@example.com" />
                    <label for="email">Amount</label>
                </div>
              
                <div class="col-sm-10">

                    <select @bind="selectedroomNumber">
                        <option value="">Choose room</option>
                @foreach (var room in rooms)
                {
                    <option  value="@room.RoomNumer">@room.RoomNumer @room.HowMannhyPersons </option>
                }
                </select>
                    <label for="email">Rooms Free</label>
                </div>
                <div class="form-floating mb-3">
                    <InputText @bind-Value="reservationRoom.Staff" readonly id="email" class="form-control" placeholder="name@example.com" />
                    <label for="email">Staff</label>
                </div>
                <button id="login-submit" type="submit" class="w-100 btn btn-lg btn-danger">Log in</button>
            </EditForm>
            
        </div>
    </Authorized>

</AuthorizeView>
@selectedroomNumber
@SelectedGender
@code {
    public int selectedroomNumber;
    string user2;
    string clicked;
    public string Eticket1 { get; set; }
    public string StatusMessage { get; set; }
    public string SelectedGender { get; set; }
    public Reservation reservationRoom = new Reservation();
    IEnumerable<Room> rooms = new List<Room>();




    public async Task HandleValidSubmit1()
    {


        var Eticket = GenerateSHA256Hash(reservationRoom.FirstName);
        Eticket1 = Eticket;
        reservationRoom.DigitalSignuture = Eticket;
        reservationRoom.RoomID = selectedroomNumber;
     
        var x = await Http.PostAsJsonAsync("/Reservation/reserve", reservationRoom);
        if (x.IsSuccessStatusCode)
        {



            NavigationManager.NavigateTo("/");
            await SendEmailAsync();

        }
        Room rooms = new Room
            {
                RoomID = selectedroomNumber,
                RoomNumer = 10,
                HowMannhyPersons = 2,
                CheckOutDate = DateTime.Now,
                Image="ssdsd.jpg"
            };
        await Http.PutAsJsonAsync<Room>($"/Reservation/UpdateRoomDate/{selectedroomNumber}", rooms);

    }
    protected override async Task OnInitializedAsync()
    {
        // Check if the user is logged in and fetch their information
        var authState = await _AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated ?? false)
        {
            // User is authenticated, you can access user ID
            user2 = user.FindFirst(c => c.Type == "sub")?.Value;
            reservationRoom.Staff = user2;
            reservationRoom.CheckInDate = DateTime.Now;
            reservationRoom.CheckOutDate = DateTime.Now;



            var x = await Http.GetFromJsonAsync<List<Room>>("/Reservation/rooms");
            rooms = x.Where(c => c.CheckOutDate == null).ToList();

           
        }
    }
    private async Task SendEmailAsync()
    {
        try
        {
            EmailRequest request = new EmailRequest();
            {
                request.Email = reservationRoom.Email;
                request.HtmlMessage = $"Mr{reservationRoom.FirstName} Yu Have Booked{reservationRoom.RoomID} This is Test From Local .Your E Ticket{Eticket1}";
                request.Subject = "Booking A Room Confirmation Test Local";
            };
         
            var x = await Http.PostAsJsonAsync("/Reservation/Email", request);
           
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred while sending the email: {ex}");

            // Handle exceptions
            // You might want to display an error message to the user or log the exception
        }
    }
    public static string GenerateSHA256Hash(string input)
    {
        using (SHA256 sha256Hash = SHA256.Create())
        {
            // Convert the input string to a byte array and compute the hash.
            byte[] data = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(input));

            // Create a new StringBuilder to collect the bytes
            // and create a string.
            StringBuilder stringBuilder = new StringBuilder();

            // Loop through each byte of the hashed data
            // and format each one as a hexadecimal string.
            for (int i = 0; i < data.Length; i++)
            {
                stringBuilder.Append(data[i].ToString("x2"));
            }

            // Return the hexadecimal string.
            return stringBuilder.ToString();
        }
    }
}

